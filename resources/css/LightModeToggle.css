/* LIGHT / DARK toggle button */
/*
Actual width/height ratio : 2.5

Modify paddings / width / height variables to obtain the rounded shape

Default status : Dark Theme
*/

.toggle {
    --padding : 1px;
    --width: 60;
    --height: 30;
    --ratio: calc(var(--width) / var(--height));
    --dark: #7e7e7e;
    --light: #fff;
    --light-input-background: #ebebeb;
    --dark-input-background: #242424;
    --light-button-background: linear-gradient(180deg,#ffcc89,#d8860b);
    --dark-button-background: linear-gradient(180deg,#777,#3a3a3a);
    --input-shadow: inset 0px 5px 15px rgba(0,0,0,0.4), inset 0px -5px 15px rgba(255,255,255,0.4);
    --button-shadow: 0px 5px 10px rgba(0,0,0,0.2);
    
    /* width: 100%; */
    padding: 5px;
    /* max-height: 40px; */
    margin: 20px auto;
    > label[for=lightmode-toggle] {
        overflow: hidden;
        display: flex;
        justify-content: space-around;
        flex-direction: row-reverse;
        width: calc(var(--width) * 1px);
        height: calc(var(--height) * 1px);
        padding: var(--padding);
        background: var(--light-input-background);
        border-radius: 100vh;
        cursor: pointer;
        position: relative;
        box-shadow: var(--input-shadow);
        &:after {
            content: '';
            left: var(--padding);
            width: calc((100% / var(--ratio)) - (var(--padding) * 2));
            height: calc(100% - (var(--padding) * 2));
            background: var(--dark-button-background);
            position: absolute;
            border-radius: 100vh;
            box-shadow: var(--button-shadow);
        }
        &:active::after, &:hover::after, &:focus::after {
            width: calc(((var(--width) + (var(--width) * 0.03)) / 2) * 1px);
        }
        > svg {
            justify-content: center;
            position: relative;
            width: 12px;
            top: 0;
            justify-self: center;
            z-index: 100;
            &:hover {
                &.moon path {
                    fill: var(--dark);
                }
                &.sun g path {
                    fill: var(--light);
                }
            }
        }
        > svg.sun {
            & g path {
                fill: var(--dark);
                transition: 0.3s;
            }
        }
        > svg.moon path {
            fill: var(--light);
            transition: 0.3s;
        }
    &, &:after {
            transition: 0.3s ease, width 0.2s;
        }
    }
    > input {
        width: 0;
        height: 0;
        visibility: hidden;
        &:not([checked]) + label[for=lightmode-toggle] {
            background: var(--dark-input-background);
        }
        &:is([checked]) + label[for=lightmode-toggle]::after {
            left: calc((var(--width) * 1px) - var(--padding));
            transform: translateX(-100% );
            background: var(--light-button-background);
        }
        &:is([checked]) + label[for=lightmode-toggle] {
            > svg.sun {
                &:hover {
                    g path {
                        fill: var(--dark);
                    }
                }
                g path {
                    fill: var(--light);
                }
            }
            > svg.moon {
                path {
                    fill: var(--dark);
                }
                &:hover {
                    path {
                        fill: var(--light);
                    }
                }
            }
        }
    }
}